---
import type { PokemonData } from '../services/pokemonDB';
import PokemonCard from './PokemonCard.astro';

export interface Props {
  pokemons?: PokemonData[];
  showInitialLoad?: boolean;
  pageSize?: number;
}

let { pokemons = [], showInitialLoad = true, pageSize = 12 } = Astro.props;

if (showInitialLoad && pokemons.length === 0) {
  const { getAllPokemon } = await import('../services/pokemonDB');
  const allPokemons = await getAllPokemon();
  pokemons = allPokemons.sort((a: any, b: any) => a.id - b.id).slice(0, pageSize);
}
---

<div class="w-full max-w-7xl mx-auto">
  <section class="space-y-8" aria-labelledby="pokemon-list-heading">
    <h2 id="pokemon-list-heading" class="sr-only">Lista completa de Pok√©mon disponibles</h2>
    
    {pokemons.length > 0 ? (
      <div 
        id="pokemon-grid"
        class="grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 xl:grid-cols-4 gap-6 justify-items-center" 
        aria-label={`Lista con ${pokemons.length} Pok√©mon disponibles`}
        data-current-count={pokemons.length}
      >
        {pokemons.map((pokemon) => (
          <div class="w-full max-w-sm pokemon-card-container">
            <PokemonCard pokemon={pokemon} />
          </div>
        ))}
      </div>
    ) : (
      <div class="text-center py-16" role="status" aria-live="polite">
        <div class="text-6xl mb-4" aria-hidden="true">üîç</div>
        <h3 class="text-xl font-semibold text-slate-300 mb-2">No se encontraron Pok√©mon</h3>
        <p class="text-slate-400">Intenta ajustar tu b√∫squeda o navegar por las p√°ginas disponibles.</p>
      </div>
    )}
    
    {showInitialLoad && pokemons.length >= pageSize && (
      <div class="text-center mt-8">
        <button 
          id="load-more-btn"
          class="bg-blue-600 hover:bg-blue-700 text-white px-6 py-3 rounded-lg font-medium transition-colors"
          aria-label="Cargar m√°s Pok√©mon"
          data-page-size={pageSize}
        >
          ‚ö° Cargar m√°s Pok√©mon
        </button>
        <p class="text-sm text-gray-400 mt-2">
          Mostrando <span id="pokemon-count">{pokemons.length}</span> de <span id="total-count">151</span> Pok√©mon
        </p>
      </div>
    )}
  </section>
</div>

<script>
  document.addEventListener('DOMContentLoaded', () => {
    const loadMoreBtn = document.getElementById('load-more-btn') as HTMLButtonElement;
    const pokemonGrid = document.getElementById('pokemon-grid');
    const pokemonCountEl = document.getElementById('pokemon-count');
    const totalCountEl = document.getElementById('total-count');
    
    if (!loadMoreBtn || !pokemonGrid) return;
    
    const pageSize = parseInt(loadMoreBtn.dataset.pageSize || '12');
    let allPokemon: any[] = [];
    let isLoading = false;
    let currentPageIndex = 1;
    
    function createPokemonCardHTML(pokemon: any): string {
      const paddedId = pokemon.id.toString().padStart(3, '0');
      const spriteUrl = pokemon.sprite || `https://raw.githubusercontent.com/PokeAPI/sprites/master/sprites/pokemon/${pokemon.id}.png`;
      
      return `
        <div class="w-full max-w-sm pokemon-card-container" style="animation: slideInUp 0.5s ease-out;">
          <article class="group relative bg-white/90 dark:bg-gray-800/90 backdrop-blur-sm rounded-2xl p-6 shadow-lg hover:shadow-2xl transition-all duration-300 hover:scale-105 border border-gray-200/50 dark:border-gray-700/50 focus-within:ring-2 focus-within:ring-purple-400 focus-within:ring-offset-2" aria-labelledby="pokemon-${pokemon.id}-name">
            <div class="flex justify-center mb-4">
              <img 
                src="${spriteUrl}"
                alt="Sprite oficial de ${pokemon.name}, Pok√©mon n√∫mero ${paddedId} de la Pok√©dex Nacional"
                width="96"
                height="96"
                class="w-24 h-24 object-contain group-hover:scale-110 transition-transform duration-300"
                loading="lazy"
                decoding="async"
              />
            </div>
            
            <div class="text-center space-y-2">
              <div class="text-sm font-mono text-gray-500 dark:text-gray-400" aria-label="N√∫mero de Pok√©dex ${pokemon.id}">
                #${paddedId}
              </div>
              
              <h3 
                id="pokemon-${pokemon.id}-name"
                class="text-xl font-bold text-gray-800 dark:text-white capitalize group-hover:text-purple-600 dark:group-hover:text-purple-400 transition-colors duration-300"
              >
                ${pokemon.name}
              </h3>
              
              <a 
                href="/pokemon/${pokemon.id}"
                class="inline-block mt-4 px-4 py-2 bg-gradient-to-r from-purple-500 to-pink-500 text-white font-semibold rounded-lg shadow-md hover:shadow-lg hover:from-purple-600 hover:to-pink-600 transition-all duration-300 focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-purple-400 focus-visible:ring-offset-2"
                aria-label="Ver detalles completos de ${pokemon.name}"
              >
                Ver detalles
              </a>
            </div>
          </article>
        </div>
      `;
    }
    
    async function loadMorePokemon() {
      if (isLoading) return;
      
      isLoading = true;
      loadMoreBtn.textContent = '‚è≥ Cargando...';
      loadMoreBtn.disabled = true;
      
      try {
        if (allPokemon.length === 0) {
          const response = await fetch('/api/search');
          const data = await response.json();
          
          if (data.success && data.results) {
            allPokemon = data.results.sort((a: any, b: any) => a.id - b.id);
            
            if (totalCountEl) {
              totalCountEl.textContent = allPokemon.length.toString();
            }
          } else {
            throw new Error('Error al cargar Pok√©mon');
          }
        }
        
        const startIndex = currentPageIndex * pageSize;
        const endIndex = startIndex + pageSize;
        const newPokemon = allPokemon.slice(startIndex, endIndex);
        
        if (newPokemon.length > 0) {
          newPokemon.forEach(pokemon => {
            const pokemonHTML = createPokemonCardHTML(pokemon);
            if (pokemonGrid) {
              pokemonGrid.insertAdjacentHTML('beforeend', pokemonHTML);
            }
          });
          
          currentPageIndex++;
          
          const updatedCount = pokemonGrid ? pokemonGrid.children.length : 0;
          if (pokemonCountEl) {
            pokemonCountEl.textContent = updatedCount.toString();
          }
          
          if (pokemonGrid) {
            pokemonGrid.setAttribute('aria-label', `Lista con ${updatedCount} Pok√©mon disponibles`);
          }
          
          if (updatedCount >= allPokemon.length) {
            loadMoreBtn.style.display = 'none';
            const buttonContainer = loadMoreBtn.parentElement;
            if (buttonContainer) {
              buttonContainer.innerHTML += '<p class="text-green-400 font-medium mt-2">‚úÖ Todos los Pok√©mon cargados</p>';
            }
          } else {
            loadMoreBtn.textContent = '‚ö° Cargar m√°s Pok√©mon';
            loadMoreBtn.disabled = false;
          }
        }
        
      } catch (error) {
        console.error('Error loading more Pokemon:', error);
        loadMoreBtn.textContent = '‚ùå Error - Intenta de nuevo';
        loadMoreBtn.disabled = false;
      }
      
      isLoading = false;
    }
    
    loadMoreBtn.addEventListener('click', loadMorePokemon);
  });
</script>

<style>
  .grid {
    animation: fadeInUp 0.6s ease-out;
  }
  
  @keyframes fadeInUp {
    from {
      opacity: 0;
      transform: translateY(20px);
    }
    to {
      opacity: 1;
      transform: translateY(0);
    }
  }
  
  @keyframes slideInUp {
    from {
      opacity: 0;
      transform: translateY(30px);
    }
    to {
      opacity: 1;
      transform: translateY(0);
    }
  }
  
  .pixelated {
    image-rendering: pixelated;
    image-rendering: -moz-crisp-edges;
    image-rendering: crisp-edges;
  }
</style>
