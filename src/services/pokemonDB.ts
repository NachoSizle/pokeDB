// üóÑÔ∏è Servicio de Pok√©mon con Astro DB + Turso - Arquitectura Robusta

import { db, eq } from 'astro:db';
import { asDrizzleTable } from '@astrojs/db/utils';
import { Pokemon as PokemonConfig, Favorite as FavoriteConfig } from '../../db/config';
import { getPokemons, getPokemonDetails, type PokemonDetails } from './pokemon';

// üîÑ Crear referencias type-safe a las tablas
const PokemonTable = asDrizzleTable('Pokemon', PokemonConfig);
const FavoriteTable = asDrizzleTable('Favorite', FavoriteConfig);

// üéØ Tipos de datos optimizados
export interface PokemonData {
  id: number;
  name: string;
  sprite: string;
  types: string[];
  stats: Record<string, number>;
  updatedAt: Date;
  isFavorite?: boolean;
}

/**
 * üìä Obtiene todos los Pok√©mon, llenando la base de datos si es necesario.
 * Esta funci√≥n es la piedra angular del proyecto. Se ejecuta durante el `build`
 * para asegurar que todos los datos est√©n disponibles de forma est√°tica.
 */
export async function getAllPokemon(): Promise<PokemonData[]> {
  try {
    // 1. Intentar obtener los Pok√©mon de la base de datos
    const cachedPokemon = await db.select().from(PokemonTable).all();

    // 2. Si la base de datos ya tiene los 151 Pok√©mon, devolverlos directamente
    if (cachedPokemon.length >= 151) {
      console.log(`‚úÖ Usando datos de la base de datos - ${cachedPokemon.length} Pok√©mon`);
      return cachedPokemon.map(p => ({
        id: p.id,
        name: p.name || '',
        sprite: p.sprite || '',
        types: p.types ? (p.types as string[]) : [],
        stats: p.stats ? (p.stats as Record<string, number>) : {},
        updatedAt: p.updatedAt || new Date(),
      }));
    }

    // 3. Si la base de datos est√° vac√≠a, llenarla desde la Pok√©API
    console.log("üîÑ Base de datos vac√≠a, obteniendo datos frescos desde Pok√©API...");

    // Obtener la lista b√°sica de los 151 Pok√©mon
    const pokemonList = await getPokemons(151, 0);
    
    // Obtener los detalles completos para cada uno en paralelo
    console.log("üì• Obteniendo detalles de 151 Pok√©mon...");
    const pokemonDetailsPromises = pokemonList.results.map(p => getPokemonDetails(p.id));
    const pokemonDetailsResults = await Promise.all(pokemonDetailsPromises);

    // Transformar los datos para la base de datos
    const freshPokemonData = pokemonDetailsResults.map((details: PokemonDetails) => ({
      id: details.id,
      name: details.name,
      sprite: details.sprites.other['official-artwork'].front_default || details.sprites.front_default,
      types: details.types.map(t => t.type.name),
      stats: details.stats.reduce((acc, s) => {
        acc[s.stat.name] = s.base_stat;
        return acc;
      }, {} as Record<string, number>),
      updatedAt: new Date(),
    }));

    // 4. Insertar los nuevos datos en la base de datos
    console.log("üíæ Llenando la base de datos con datos enriquecidos...");
    await db.insert(PokemonTable).values(freshPokemonData).execute();

    console.log(`üéâ Base de datos llenada con ${freshPokemonData.length} Pok√©mon`);
    return freshPokemonData;

  } catch (error) {
    console.error("‚ùå Error cr√≠tico obteniendo Pok√©mon:", error);
    throw new Error("No se pudo obtener la lista de Pok√©mon. Revisa los logs del servidor.");
  }
}

/**
 * üîç Obtiene un Pok√©mon espec√≠fico por ID desde la cach√© local
 */
export async function getPokemonById(id: number): Promise<PokemonData | null> {
  try {
    const allPokemon = await getAllPokemon();
    return allPokemon.find(p => p.id === id) || null;
  } catch (error) {
    console.error(`‚ùå Error obteniendo Pok√©mon ${id}:`, error);
    return null;
  }
}

/**
 * ‚≠ê Obtiene todos los Pok√©mon favoritos (MODO DEPURACI√ìN: SOLO LEE LA TABLA FAVORITE)
 */
export async function getFavoritePokemon(): Promise<any[]> { // Tipo de retorno cambiado a any[] para depuraci√≥n
  try {
    console.log("Ejecutando consulta de depuraci√≥n: SELECT * FROM FavoriteTable");
    // Hacemos la consulta m√°s simple posible para ver si la tabla Favorite es accesible.
    const favoriteIds = await db.select().from(FavoriteTable).all();
    console.log(`Consulta de depuraci√≥n exitosa, se encontraron ${favoriteIds.length} favoritos.`);
    
    // Devolvemos los datos crudos. El frontend no los mostrar√°, pero evitaremos el error 500.
    return favoriteIds;

  } catch (error) {
    console.error("‚ùå Error DETALLADO en la consulta de depuraci√≥n:", error);
    throw new Error(`Error de base de datos al consultar la tabla Favorite: ${error.message}`);
  }
}

/**
 * üíñ A√±ade un Pok√©mon a favoritos
 */
export async function addToFavorites(pokemonId: number): Promise<boolean> {
  try {
    const existing = await db.select().from(FavoriteTable).where(eq(FavoriteTable.pokemonId, pokemonId)).all();
    if (existing.length === 0) {
      await db.insert(FavoriteTable).values({ pokemonId }).execute();
      console.log(`üíñ Pok√©mon ${pokemonId} a√±adido a favoritos`);
    }
    return true;
  } catch (error) {
    console.error(`‚ùå Error a√±adiendo a favoritos:`, error);
    return false;
  }
}

/**
 * üóëÔ∏è Remueve un Pok√©mon de favoritos
 */
export async function removeFromFavorites(pokemonId: number): Promise<boolean> {
  try {
    await db.delete(FavoriteTable).where(eq(FavoriteTable.pokemonId, pokemonId)).execute();
    console.log(`üíî Pok√©mon ${pokemonId} removido de favoritos`);
    return true;
  } catch (error) {
    console.error(`‚ùå Error removiendo de favoritos:`, error);
    return false;
  }
}

/**
 * üîç Verifica si un Pok√©mon es favorito
 */
export async function isFavorite(pokemonId: number): Promise<boolean> {
  try {
    const result = await db.select().from(FavoriteTable).where(eq(FavoriteTable.pokemonId, pokemonId)).all();
    return result.length > 0;
  } catch (error) {
    console.error(`‚ùå Error verificando favorito:`, error);
    return false;
  }
}
