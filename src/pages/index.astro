---
// üè† P√°gina principal - PokeDB
// P√°gina est√°tica con componentes optimizados para SSG

export const prerender = true;

import MainLayout from '../layouts/MainLayout.astro';
import PokemonList from '../components/PokemonList.astro';

const pageTitle = "PokeDB - Pok√©dex Completa";
const pageDescription = `Descubre todos los 151 Pok√©mon de la primera generaci√≥n. Base de datos optimizada con cach√© TTL y sprites oficiales.`;
---

<MainLayout title={pageTitle} description={pageDescription}>
	<!-- üé® Hero Section -->
	<section class="relative py-20 px-4">
		<div class="max-w-6xl mx-auto text-center">
			<h1 class="text-5xl md:text-7xl font-bold bg-gradient-to-r from-blue-600 via-purple-600 to-indigo-600 bg-clip-text text-transparent mb-6">
				PokeDB
			</h1>
			
			<p class="text-xl md:text-2xl text-gray-600 dark:text-gray-300 mb-8 max-w-3xl mx-auto">
				Explora la <strong>Pok√©dex completa</strong> con datos actualizados, sprites oficiales 
				y rendimiento optimizado con cach√© inteligente.
			</p>
			
			<!-- üîç Bot√≥n de b√∫squeda avanzada -->
			<div class="mb-8">
				<button 
					id="openSearchModal"
					type="button"
					class="inline-flex items-center gap-2 px-8 py-3 bg-gradient-to-r from-purple-500 to-pink-500 text-white font-semibold rounded-xl shadow-lg hover:shadow-xl hover:from-purple-600 hover:to-pink-600 transition-all duration-300 transform hover:scale-105"
				>
					<span>üîç</span>
					B√∫squeda Avanzada
					<span class="text-xs bg-white/20 px-2 py-1 rounded-full">Nuevo</span>
				</button>
			</div>
			
			<!-- üìä Stats -->
			<div class="flex flex-wrap justify-center gap-8 mb-12">
				<div class="bg-white/80 dark:bg-gray-800/80 backdrop-blur-sm rounded-2xl px-6 py-4 shadow-lg">
					<div class="text-3xl font-bold text-blue-600 dark:text-blue-400">151</div>
					<div class="text-sm text-gray-600 dark:text-gray-400">Pok√©mon</div>
				</div>
				
				<div class="bg-white/80 dark:bg-gray-800/80 backdrop-blur-sm rounded-2xl px-6 py-4 shadow-lg">
					<div class="text-3xl font-bold text-purple-600 dark:text-purple-400">SSR</div>
					<div class="text-sm text-gray-600 dark:text-gray-400">Optimizado</div>
				</div>
				
				<div class="bg-white/80 dark:bg-gray-800/80 backdrop-blur-sm rounded-2xl px-6 py-4 shadow-lg">
					<div class="text-3xl font-bold text-indigo-600 dark:text-indigo-400">24h</div>
					<div class="text-sm text-gray-600 dark:text-gray-400">Cach√© TTL</div>
				</div>
			</div>
		</div>
	</section>

	<!-- üéÆ Pokemon Grid -->
	<section class="pb-20 px-4">
		<div class="max-w-7xl mx-auto">
			<PokemonList />
		</div>
	</section>

	<!-- üîç Modal de B√∫squeda Avanzada -->
	<dialog id="searchModal" class="backdrop:bg-black/80 backdrop:backdrop-blur-sm hidden">
		<style>
			#searchModal {
				/* Reset de estilos por defecto del dialog */
				margin: 0;
				padding: 0;
				border: none;
				background: transparent;
				max-width: none;
				max-height: none;
				
				/* Posicionamiento base - pantalla completa en m√≥vil */
				position: fixed;
				top: 0;
				left: 0;
				width: 100vw;
				height: 100vh;
				overflow-y: auto;
			}
			
			#searchModal[open] {
				display: flex;
			}
			
			#searchModal::backdrop {
				background: rgba(0, 0, 0, 0.8);
				backdrop-filter: blur(4px);
			}
			
			/* Contenido del modal */
			#searchModal > div {
				background: white;
				min-height: 100vh;
				width: 100%;
			}
			
			@media (prefers-color-scheme: dark) {
				#searchModal > div {
					background: rgb(17 24 39); /* gray-900 */
				}
			}
			
			/* Desktop: modal centrado */
			@media (min-width: 768px) {
				#searchModal {
					align-items: center;
					justify-content: center;
					padding: 1rem;
				}
				
				#searchModal > div {
					background: white;
					border: 1px solid rgb(229 231 235);
					border-radius: 1rem;
					box-shadow: 0 25px 50px -12px rgba(0, 0, 0, 0.25);
					min-height: auto;
					max-height: 90vh;
					width: 80vw;
					max-width: 72rem;
					overflow-y: auto;
				}
				
				@media (prefers-color-scheme: dark) {
					#searchModal > div {
						background: rgb(17 24 39);
						border-color: rgb(55 65 81);
					}
				}
			}
		</style>
		<div>
			<div class="sticky top-0 bg-white dark:bg-gray-900 border-b border-gray-200 dark:border-gray-700 p-4 md:p-6 flex justify-between items-center">
				<h2 class="text-xl md:text-2xl font-bold text-gray-800 dark:text-white flex items-center gap-2">
					<span>üîç</span>
					B√∫squeda Avanzada de Pok√©mon
				</h2>
				<button 
					id="closeSearchModal"
					type="button"
					class="p-2 hover:bg-gray-100 dark:hover:bg-gray-800 rounded-lg transition-colors text-white hover:text-gray-200"
				>
					<span class="text-xl md:text-2xl">‚úï</span>
				</button>
			</div>
		
		<div class="p-4 md:p-6 space-y-6">
			<!-- üéõÔ∏è Panel de Filtros -->
			<div class="grid grid-cols-1 lg:grid-cols-2 gap-6">
				<!-- üìù Columna 1: B√∫squeda por texto y tipo -->
				<div class="space-y-4">
					<!-- B√∫squeda por nombre -->
					<div class="space-y-2">
						<label class="block text-sm font-medium text-gray-700 dark:text-gray-300">
							Nombre del Pok√©mon
						</label>
						<input
							type="text"
							id="searchName"
							placeholder="Ej: pikachu, charizard..."
							class="w-full px-3 py-2 border border-gray-300 dark:border-gray-600 rounded-lg focus:ring-2 focus:ring-purple-500 focus:border-transparent bg-white dark:bg-gray-700 text-gray-900 dark:text-white placeholder-gray-500 dark:placeholder-gray-400"
						/>
					</div>

					<!-- Filtro por tipo -->
					<div class="space-y-2 relative">
						<label class="block text-sm font-medium text-gray-700 dark:text-gray-300">
							Tipos de Pok√©mon
						</label>
						
						<!-- üé® Contenedor de tags seleccionados -->
						<div 
							id="typesContainer"
							class="min-h-[40px] p-2 border border-gray-300 dark:border-gray-600 rounded-lg bg-white dark:bg-gray-700 flex flex-wrap gap-1 items-center cursor-pointer hover:border-purple-500 dark:hover:border-purple-400 transition-colors"
						>
							<div id="selectedTypeTags" class="flex flex-wrap gap-1">
								<!-- Los tags se mostrar√°n aqu√≠ -->
							</div>
							
							<!-- ÔøΩ Placeholder cuando no hay tipos seleccionados -->
							<div id="typesPlaceholder" class="text-gray-500 dark:text-gray-400 text-sm">
								Selecciona tipos de Pok√©mon...
							</div>
							
							<!-- üîΩ Bot√≥n visual para indicar que es clickeable -->
							<div class="ml-auto text-gray-400 text-lg">
								+
							</div>
						</div>
						
						<!-- üìã Dropdown de opciones -->
						<div 
							id="typesDropdown" 
							class="hidden absolute z-50 w-full mt-1 bg-white dark:bg-gray-700 border border-gray-300 dark:border-gray-600 rounded-lg shadow-lg max-h-48 overflow-y-auto"
						>
							<div class="p-2 space-y-1" id="typesListContainer">
								<!-- Los tipos disponibles se mostrar√°n aqu√≠ -->
							</div>
						</div>
					</div>
				</div>

				<!-- üìä Columna 2: Rangos de estad√≠sticas -->
				<div class="space-y-4">
					<!-- Rango de poder total -->
					<div class="space-y-2">
						<label class="block text-sm font-medium text-gray-700 dark:text-gray-300">
							Poder Total: <span id="statsRangeDisplay">0 - 800</span>
						</label>
						<div class="flex gap-2">
							<input
								type="range"
								id="minStats"
								min="0"
								max="800"
								value="0"
								class="flex-1"
							/>
							<input
								type="range"
								id="maxStats"
								min="0"
								max="800"
								value="800"
								class="flex-1"
							/>
						</div>
					</div>

					<!-- Rango de HP -->
					<div class="space-y-2">
						<label class="block text-sm font-medium text-gray-700 dark:text-gray-300">
							HP: <span id="hpRangeDisplay">0 - 255</span>
						</label>
						<div class="flex gap-2">
							<input
								type="range"
								id="minHp"
								min="0"
								max="255"
								value="0"
								class="flex-1"
							/>
							<input
								type="range"
								id="maxHp"
								min="0"
								max="255"
								value="255"
								class="flex-1"
							/>
						</div>
					</div>
				</div>
			</div>

			<!-- üéÆ Botones de acci√≥n -->
			<div class="flex flex-col sm:flex-row gap-3">
				<button
					id="performSearch"
					type="button"
					class="w-full sm:w-auto px-6 py-3 bg-gradient-to-r from-purple-500 to-pink-500 text-white font-semibold rounded-lg shadow-md hover:shadow-lg hover:from-purple-600 hover:to-pink-600 transition-all duration-300 flex items-center justify-center gap-2"
				>
					<span>üîç</span>
					<span id="searchButtonText">Buscar Pok√©mon</span>
				</button>
				
				<button
					id="clearFilters"
					type="button"
					class="w-full sm:w-auto px-6 py-3 bg-gray-500 text-white font-semibold rounded-lg shadow-md hover:shadow-lg hover:bg-gray-600 transition-all duration-300 flex items-center justify-center gap-2"
				>
					üßπ Limpiar Filtros
				</button>
			</div>

			<!-- üìä Informaci√≥n de resultados -->
			<div class="flex flex-col sm:flex-row sm:justify-between sm:items-center gap-3">
				<p class="text-gray-600 dark:text-gray-400 text-center sm:text-left">
					<span class="font-semibold text-purple-600 dark:text-purple-400" id="resultsCount">
						0
					</span> Pok√©mon encontrados
				</p>
				
				<div id="loadingIndicator" class="hidden items-center justify-center sm:justify-start gap-2 text-purple-600 dark:text-purple-400">
					<span class="animate-spin">‚è≥</span>
					<span>Buscando...</span>
				</div>
			</div>

			<!-- üéÆ Grid de resultados -->
			<div id="searchResults" class="space-y-4">
				<div id="noResults" class="hidden text-center py-16">
					<div class="text-6xl mb-4">üîç</div>
					<h3 class="text-xl font-semibold text-gray-600 dark:text-gray-300 mb-2">
						No se encontraron Pok√©mon
					</h3>
					<p class="text-gray-500 dark:text-gray-400">
						Intenta ajustar los filtros de b√∫squeda
					</p>
				</div>
				<div id="resultsGrid" class="grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 xl:grid-cols-4 gap-6">
					<!-- Los resultados se insertar√°n aqu√≠ din√°micamente -->
				</div>
			</div>
		</div>
	</div>
	</dialog>

	<!-- üöÄ JavaScript para el modal de b√∫squeda avanzada -->
	<script is:inline>
		// üéõÔ∏è Variables y elementos del DOM
		const openButton = document.getElementById('openSearchModal');
		const closeButton = document.getElementById('closeSearchModal');
		const modal = document.getElementById('searchModal');
		const searchNameInput = document.getElementById('searchName');
		const typesContainer = document.getElementById('typesContainer');
		const typesDropdown = document.getElementById('typesDropdown');
		const selectedTypeTags = document.getElementById('selectedTypeTags');
		const typesPlaceholder = document.getElementById('typesPlaceholder');
		const typesListContainer = document.getElementById('typesListContainer');
		const minStatsRange = document.getElementById('minStats');
		const maxStatsRange = document.getElementById('maxStats');
		const minHpRange = document.getElementById('minHp');
		const maxHpRange = document.getElementById('maxHp');
		const statsRangeDisplay = document.getElementById('statsRangeDisplay');
		const hpRangeDisplay = document.getElementById('hpRangeDisplay');
		const performSearchButton = document.getElementById('performSearch');
		const clearFiltersButton = document.getElementById('clearFilters');
		const searchButtonText = document.getElementById('searchButtonText');
		const loadingIndicator = document.getElementById('loadingIndicator');
		const resultsCount = document.getElementById('resultsCount');
		const noResults = document.getElementById('noResults');
		const resultsGrid = document.getElementById('resultsGrid');

		// üé® Array para tipos seleccionados y disponibles
		let selectedTypes = [];
		let availableTypes = [];

		// üé® Colores para tipos de Pok√©mon
		const typeColors = {
			normal: 'bg-gray-400',
			fire: 'bg-red-500',
			water: 'bg-blue-500',
			electric: 'bg-yellow-400',
			grass: 'bg-green-500',
			ice: 'bg-cyan-300',
			fighting: 'bg-orange-700',
			poison: 'bg-purple-600',
			ground: 'bg-yellow-600',
			flying: 'bg-indigo-400',
			psychic: 'bg-pink-500',
			bug: 'bg-lime-500',
			rock: 'bg-yellow-800',
			ghost: 'bg-indigo-800',
			dragon: 'bg-indigo-600',
			dark: 'bg-gray-800',
			steel: 'bg-gray-500',
			fairy: 'bg-pink-300',
		};

		// üîó Event Listeners
		if (openButton) openButton.addEventListener('click', openModal);
		if (closeButton) closeButton.addEventListener('click', closeModal);
		if (modal) modal.addEventListener('click', function(e) {
			if (e.target === modal) closeModal();
		});

		// üé® Dropdown de tipos - Click en todo el contenedor
		if (typesContainer) typesContainer.addEventListener('click', function(event) {
			// Verificar si el click fue en un bot√≥n de eliminar tag (√ó)
			if (event.target.closest('.remove-tag-btn')) {
				return; // No abrir dropdown si se clicke√≥ en un bot√≥n de eliminar
			}
			toggleTypesDropdown();
		});
		
		// üì± Cerrar dropdown al hacer click fuera
		document.addEventListener('click', function(e) {
			if (typesDropdown && !typesDropdown.contains(e.target) && !typesContainer.contains(e.target)) {
				typesDropdown.classList.add('hidden');
			}
		});

		// üéõÔ∏è Range inputs listeners
		if (minStatsRange) minStatsRange.addEventListener('input', updateStatsDisplay);
		if (maxStatsRange) maxStatsRange.addEventListener('input', updateStatsDisplay);
		if (minHpRange) minHpRange.addEventListener('input', updateHpDisplay);
		if (maxHpRange) maxHpRange.addEventListener('input', updateHpDisplay);

		// üéÆ Action buttons
		if (performSearchButton) performSearchButton.addEventListener('click', performSearch);
		if (clearFiltersButton) clearFiltersButton.addEventListener('click', clearFilters);

		// ‚å®Ô∏è Enter key para b√∫squeda
		if (searchNameInput) searchNameInput.addEventListener('keypress', function(e) {
			if (e.key === 'Enter') performSearch();
		});

		// üîì Funciones principales
		async function openModal() {
			if (modal) {
				modal.classList.remove('hidden');
				if (modal.showModal) {
					modal.showModal();
				}
				await loadAvailableTypes();
				updateStatsDisplay();
				updateHpDisplay();
			}
		}

		function closeModal() {
			if (modal) {
				if (modal.close) {
					modal.close();
				}
				modal.classList.add('hidden');
			}
		}

		// üé® Cargar tipos disponibles desde la API
		async function loadAvailableTypes() {
			try {
				const response = await fetch('/api/search', {
					method: 'POST',
					headers: { 'Content-Type': 'application/json' },
					body: JSON.stringify({ action: 'getMetadata' })
				});
				const data = await response.json();
				
				console.log('Respuesta de metadatos:', data); // Debug
				
				if (data.success && data.metadata && data.metadata.types && typesListContainer) {
					availableTypes = data.metadata.types;
					renderAvailableTypes();
					console.log('Tipos cargados:', data.metadata.types); // Debug
				} else {
					console.warn('No se encontraron tipos en la respuesta:', data);
				}
			} catch (error) {
				console.error('Error cargando tipos:', error);
			}
		}

		// üé® Renderizar lista de tipos disponibles
		function renderAvailableTypes() {
			if (!typesListContainer) return;
			
			typesListContainer.innerHTML = '';
			const unselectedTypes = availableTypes.filter(type => !selectedTypes.includes(type));
			
			unselectedTypes.forEach(function(type) {
				const typeOption = createTypeOption(type);
				typesListContainer.appendChild(typeOption);
			});
			
			// Mostrar mensaje si no hay tipos disponibles
			if (unselectedTypes.length === 0) {
				const emptyMessage = document.createElement('div');
				emptyMessage.className = 'text-center text-gray-500 dark:text-gray-400 py-2 text-sm';
				emptyMessage.textContent = 'Todos los tipos seleccionados';
				typesListContainer.appendChild(emptyMessage);
			}
		}

		// üé® Crear opci√≥n de tipo para el dropdown
		function createTypeOption(type) {
			const container = document.createElement('div');
			container.className = 'flex items-center gap-2 p-2 hover:bg-gray-100 dark:hover:bg-gray-600 rounded cursor-pointer transition-colors';
			container.addEventListener('click', function() { selectType(type); });
			
			// üé® Badge de color para el tipo
			const colorClass = typeColors[type] || 'bg-gray-400';
			const badge = document.createElement('span');
			badge.className = 'w-4 h-4 rounded-full ' + colorClass;
			
			const label = document.createElement('span');
			label.textContent = type.charAt(0).toUpperCase() + type.slice(1);
			label.className = 'text-sm capitalize flex-1';
			
			container.appendChild(badge);
			container.appendChild(label);
			
			return container;
		}

		// ÔøΩ Seleccionar un tipo
		function selectType(type) {
			if (!selectedTypes.includes(type)) {
				selectedTypes.push(type);
				renderSelectedTags();
				renderAvailableTypes();
			}
			// Cerrar dropdown despu√©s de seleccionar
			if (typesDropdown) {
				typesDropdown.classList.add('hidden');
			}
		}

		// üè∑Ô∏è Renderizar tags de tipos seleccionados
		function renderSelectedTags() {
			if (!selectedTypeTags || !typesPlaceholder) return;
			
			selectedTypeTags.innerHTML = '';
			selectedTypes.forEach(function(type) {
				const tag = createTypeTag(type);
				selectedTypeTags.appendChild(tag);
			});
			
			// Mostrar/ocultar placeholder seg√∫n si hay tipos seleccionados
			if (selectedTypes.length === 0) {
				typesPlaceholder.style.display = 'block';
			} else {
				typesPlaceholder.style.display = 'none';
			}
		}

		// üé® Crear tag de tipo seleccionado
		function createTypeTag(type) {
			const tag = document.createElement('div');
			const colorClass = typeColors[type] || 'bg-gray-400';
			tag.className = 'inline-flex items-center gap-1 px-2 py-1 rounded-full text-xs font-semibold text-white ' + colorClass;
			
			const typeText = document.createElement('span');
			typeText.textContent = type.charAt(0).toUpperCase() + type.slice(1);
			typeText.className = 'capitalize';
			
			const removeButton = document.createElement('button');
			removeButton.type = 'button';
			removeButton.className = 'remove-tag-btn ml-1 text-white hover:text-gray-200 transition-colors';
			removeButton.innerHTML = '√ó';
			removeButton.addEventListener('click', function() { removeType(type); });
			
			tag.appendChild(typeText);
			tag.appendChild(removeButton);
			
			return tag;
		}

		// üóëÔ∏è Remover un tipo seleccionado
		function removeType(type) {
			selectedTypes = selectedTypes.filter(t => t !== type);
			renderSelectedTags();
			renderAvailableTypes();
		}

		// üîΩ Alternar dropdown de tipos
		function toggleTypesDropdown() {
			if (typesDropdown) {
				typesDropdown.classList.toggle('hidden');
				if (!typesDropdown.classList.contains('hidden')) {
					renderAvailableTypes(); // Actualizar lista al abrir
				}
			}
		}

		// üìä Actualizar displays de rangos
		function updateStatsDisplay() {
			const min = minStatsRange ? minStatsRange.value : '0';
			const max = maxStatsRange ? maxStatsRange.value : '800';
			if (statsRangeDisplay) {
				statsRangeDisplay.textContent = min + ' - ' + max;
			}
		}

		function updateHpDisplay() {
			const min = minHpRange ? minHpRange.value : '0';
			const max = maxHpRange ? maxHpRange.value : '255';
			if (hpRangeDisplay) {
				hpRangeDisplay.textContent = min + ' - ' + max;
			}
		}

		// üîç Realizar b√∫squeda
		async function performSearch() {
			setLoading(true);
			
			try {
				const params = new URLSearchParams();
				const searchName = searchNameInput ? searchNameInput.value.trim() : '';
				const minStats = parseInt(minStatsRange ? minStatsRange.value : '0');
				const maxStats = parseInt(maxStatsRange ? maxStatsRange.value : '800');
				const minHp = parseInt(minHpRange ? minHpRange.value : '0');
				const maxHp = parseInt(maxHpRange ? maxHpRange.value : '255');

				if (searchName) params.append('name', searchName);
				
				// üé® Agregar tipos m√∫ltiples como par√°metros separados
				selectedTypes.forEach(function(type) {
					params.append('types[]', type);
				});
				
				if (minStats > 0) params.append('minStats', minStats.toString());
				if (maxStats < 800) params.append('maxStats', maxStats.toString());
				if (minHp > 0) params.append('minHp', minHp.toString());
				if (maxHp < 255) params.append('maxHp', maxHp.toString());

				const response = await fetch('/api/search?' + params.toString());
				const data = await response.json();
				
				if (data.success) {
					displayResults(data.results);
				} else {
					console.error('Error en b√∫squeda:', data.error);
					displayResults([]);
				}
			} catch (error) {
				console.error('Error realizando b√∫squeda:', error);
				displayResults([]);
			} finally {
				setLoading(false);
			}
		}

		// üé® Mostrar resultados
		function displayResults(results) {
			if (resultsCount) resultsCount.textContent = results.length;
			
			if (results.length === 0) {
				if (noResults) noResults.classList.remove('hidden');
				if (resultsGrid) resultsGrid.innerHTML = '';
			} else {
				if (noResults) noResults.classList.add('hidden');
				if (resultsGrid) resultsGrid.innerHTML = results.map(function(pokemon) {
					return createPokemonCard(pokemon);
				}).join('');
			}
		}

		// üé¥ Crear tarjeta de Pok√©mon
		function createPokemonCard(pokemon) {
			const types = JSON.parse(pokemon.types);
			const typeBadges = types.map(function(type) {
				const colorClass = typeColors[type] || 'bg-gray-400';
				return '<span class="px-2 py-1 rounded-full text-xs font-semibold text-white capitalize ' + colorClass + '">' + type + '</span>';
			}).join('');

			return '<article class="group relative bg-white/90 dark:bg-gray-800/90 backdrop-blur-sm rounded-2xl p-6 shadow-lg hover:shadow-2xl transition-all duration-300 hover:scale-105 border border-gray-200/50 dark:border-gray-700/50">' +
				'<div class="flex justify-center mb-4">' +
					'<img src="' + pokemon.sprite + '" alt="Sprite de ' + pokemon.name + '" width="96" height="96" class="w-24 h-24 object-contain group-hover:scale-110 transition-transform duration-300" loading="lazy" />' +
				'</div>' +
				'<div class="text-center space-y-2">' +
					'<div class="text-sm font-mono text-gray-500 dark:text-gray-400">#' + pokemon.id.toString().padStart(3, '0') + '</div>' +
					'<h3 class="text-xl font-bold text-gray-800 dark:text-white capitalize group-hover:text-purple-600 dark:group-hover:text-purple-400 transition-colors duration-300">' + pokemon.name + '</h3>' +
					'<div class="flex justify-center gap-1 flex-wrap">' + typeBadges + '</div>' +
					'<div class="text-sm text-gray-600 dark:text-gray-400 space-y-1">' +
						'<div>üí™ Poder Total: <span class="font-semibold text-purple-600 dark:text-purple-400">' + pokemon.totalStats + '</span></div>' +
						'<div>‚ù§Ô∏è HP: ' + pokemon.hp + ' | ‚öîÔ∏è ATK: ' + pokemon.attack + ' | üõ°Ô∏è DEF: ' + pokemon.defense + '</div>' +
					'</div>' +
					'<a href="/pokemon/' + pokemon.id + '" class="inline-block mt-4 px-4 py-2 bg-gradient-to-r from-purple-500 to-pink-500 text-white font-semibold rounded-lg shadow-md hover:shadow-lg hover:from-purple-600 hover:to-pink-600 transition-all duration-300">Ver detalles</a>' +
				'</div>' +
			'</article>';
		}

		// üßπ Limpiar filtros
		function clearFilters() {
			if (searchNameInput) searchNameInput.value = '';
			
			// üé® Limpiar tipos seleccionados
			selectedTypes = [];
			renderSelectedTags();
			renderAvailableTypes();
			
			if (minStatsRange) minStatsRange.value = '0';
			if (maxStatsRange) maxStatsRange.value = '800';
			if (minHpRange) minHpRange.value = '0';
			if (maxHpRange) maxHpRange.value = '255';
			
			updateStatsDisplay();
			updateHpDisplay();
			displayResults([]);
		}

		// ‚è≥ Estado de carga
		function setLoading(loading) {
			if (loading) {
				if (loadingIndicator) {
					loadingIndicator.classList.remove('hidden');
					loadingIndicator.classList.add('flex');
				}
				if (searchButtonText) searchButtonText.textContent = 'Buscando...';
				if (performSearchButton) performSearchButton.disabled = true;
			} else {
				if (loadingIndicator) {
					loadingIndicator.classList.add('hidden');
					loadingIndicator.classList.remove('flex');
				}
				if (searchButtonText) searchButtonText.textContent = 'Buscar Pok√©mon';
				if (performSearchButton) performSearchButton.disabled = false;
			}
		}

		// üéØ Inicializaci√≥n
		updateStatsDisplay();
		updateHpDisplay();
	</script>
</MainLayout>