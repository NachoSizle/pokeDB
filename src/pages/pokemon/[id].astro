---
// üìÑ P√°gina de detalle de Pok√©mon
// Generada est√°ticamente con una isla de interactividad para los favoritos.

export const prerender = true;

import { getAllPokemon } from '../../services/pokemonDB';
import MainLayout from '../../layouts/MainLayout.astro';
import { Image } from 'astro:assets';

// 1. üó∫Ô∏è Generar las rutas est√°ticas para cada Pok√©mon
export async function getStaticPaths() {
  try {
    const allPokemon = await getAllPokemon();
    
    // Si no hay Pok√©mon, devolver un array vac√≠o para evitar errores en build
    if (!allPokemon || allPokemon.length === 0) {
      console.warn("‚ö†Ô∏è No se encontraron Pok√©mon en la base de datos. Generando p√°gina vac√≠a.");
      return [];
    }

    return allPokemon.map((pokemon) => {
      return {
        params: { id: pokemon.id.toString() },
        props: { pokemon },
      };
    });
  } catch (error) {
    console.error("‚ùå Error generando rutas est√°ticas:", error);
    return [];
  }
}

// props se reciben desde getStaticPaths
const { pokemon } = Astro.props;

// üîß Parsear tipos si vienen como string JSON
const pokemonTypes = typeof pokemon.types === 'string' ? JSON.parse(pokemon.types) : pokemon.types;
const pokemonStats = typeof pokemon.stats === 'string' ? JSON.parse(pokemon.stats) : pokemon.stats;

const pageTitle = `${pokemon.name} - PokeDB`;
const pageDescription = `Informaci√≥n detallada sobre ${pokemon.name}, incluyendo sus estad√≠sticas, tipos y habilidades.`;
const pokemonImage = pokemon.sprite || `/logo.webp`;

// üé® Funci√≥n para obtener el color de fondo seg√∫n el tipo de Pok√©mon
const getTypeColor = (type: string) => {
  const colors: { [key: string]: string } = {
    normal: 'bg-gray-400',
    fire: 'bg-red-500',
    water: 'bg-blue-500',
    electric: 'bg-yellow-400',
    grass: 'bg-green-500',
    ice: 'bg-cyan-300',
    fighting: 'bg-orange-700',
    poison: 'bg-purple-600',
    ground: 'bg-yellow-600',
    flying: 'bg-indigo-400',
    psychic: 'bg-pink-500',
    bug: 'bg-lime-500',
    rock: 'bg-yellow-800',
    ghost: 'bg-indigo-800',
    dragon: 'bg-indigo-600',
    dark: 'bg-gray-800',
    steel: 'bg-gray-500',
    fairy: 'bg-pink-300',
  };
  return colors[type] || 'bg-gray-400';
};
---

<MainLayout title={pageTitle} description={pageDescription} image={pokemonImage}>
  <!-- üîô Bot√≥n volver -->
  <div class="pt-4 px-4">
    <div class="max-w-7xl mx-auto">
      <nav aria-label="Navegaci√≥n de regreso">
        <a 
          href="/"
          class="inline-flex items-center gap-2 px-4 py-2 bg-white/80 dark:bg-gray-800/80 backdrop-blur-sm rounded-lg shadow-md hover:shadow-lg transition-all duration-300 text-gray-700 dark:text-gray-300 hover:text-blue-600 dark:hover:text-blue-400 focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-blue-400 focus-visible:ring-offset-2"
          aria-label="Volver a la lista principal de Pok√©mon"
        >
          <svg class="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24" aria-hidden="true">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M15 19l-7-7 7-7"></path>
          </svg>
          Volver a la Pok√©dex
        </a>
      </nav>
    </div>
  </div>

  <!-- üé® Contenedor principal -->
  <div class="max-w-4xl mx-auto p-4">
    <article class="bg-white/80 dark:bg-gray-800/80 backdrop-blur-sm rounded-3xl shadow-2xl overflow-hidden" role="main">
      <!-- Cabecera -->
      <header class:list={['p-8 text-white text-center relative overflow-hidden', getTypeColor(pokemonTypes[0])]}>
        <div class="absolute -top-10 -right-10 w-48 h-48 bg-white/20 rounded-full" aria-hidden="true"></div>
        <div class="absolute -bottom-16 -left-10 w-40 h-40 bg-white/20 rounded-full" aria-hidden="true"></div>
        
        <div class="relative flex justify-center items-center gap-4">
          <div>
            <h1 class="text-5xl font-bold capitalize tracking-wider mb-2" style="text-shadow: 2px 2px 4px rgba(0,0,0,0.3);">
              {pokemon.name}
            </h1>
            <p class="text-2xl font-semibold opacity-90" aria-label={`N√∫mero de Pok√©dex ${pokemon.id}`}>
              #{String(pokemon.id).padStart(3, '0')}
            </p>
          </div>
        </div>
      </header>

      <!-- Contenido -->
      <div class="p-8 grid grid-cols-1 md:grid-cols-2 gap-8 items-center">
        <!-- Imagen del Pok√©mon -->
        <div class="text-center">
          <Image 
            src={pokemon.sprite} 
            alt={`Sprite oficial de alta resoluci√≥n de ${pokemon.name}, Pok√©mon #${pokemon.id}`}
            width={256} 
            height={256}
            class="mx-auto drop-shadow-2xl transition-transform duration-500 hover:scale-110"
          />
        </div>

        <!-- Detalles -->
        <div class="space-y-6">
          <!-- Tipos -->
          <section aria-labelledby="pokemon-types">
            <h2 id="pokemon-types" class="text-2xl font-bold text-gray-800 dark:text-white mb-3 border-b-2 border-gray-200 dark:border-gray-700 pb-2">
              Tipos
            </h2>
            <div class="flex gap-3" role="list" aria-label={`Tipos de ${pokemon.name}`}>
              {pokemonTypes.map((type: string) => (
                <span 
                  class={`px-4 py-1 rounded-full text-white font-semibold capitalize text-sm ${getTypeColor(type)}`}
                  role="listitem"
                  aria-label={`Tipo ${type}`}
                >
                  {type}
                </span>
              ))}
            </div>
          </section>

          <!-- Estad√≠sticas -->
          <section aria-labelledby="pokemon-stats">
            <h2 id="pokemon-stats" class="text-2xl font-bold text-gray-800 dark:text-white mb-4 border-b-2 border-gray-200 dark:border-gray-700 pb-2">
              Estad√≠sticas
            </h2>
            <div class="space-y-3" role="list" aria-label={`Estad√≠sticas de combate de ${pokemon.name}`}>
              {Object.entries(pokemonStats).map(([stat, value]) => (
                <div role="listitem">
                  <div class="flex justify-between mb-1">
                    <span class="text-base font-medium text-gray-700 dark:text-gray-300 capitalize">
                      {stat.replace('-', ' ')}
                    </span>
                    <span class="text-sm font-medium text-gray-700 dark:text-gray-300" aria-label={`Valor: ${value}`}>
                      {value}
                    </span>
                  </div>
                  <div class="w-full bg-gray-200 dark:bg-gray-700 rounded-full h-2.5" role="progressbar" aria-valuenow={value as number} aria-valuemin={0} aria-valuemax={200} aria-label={`${stat.replace('-', ' ')}: ${value} de 200`}>
                    <div 
                      class="bg-gradient-to-r from-blue-500 to-purple-600 h-2.5 rounded-full transition-all duration-1000" 
                      style={`width: ${Math.min((value as number / 200) * 100, 100)}%`}
                    ></div>
                  </div>
                </div>
              ))}
            </div>
          </section>
        </div>
      </div>
    </article>
  </div>
</MainLayout>
